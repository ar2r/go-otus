package hw05parallelexecution

import (
	"errors"
	"sync"
)

var ErrErrorsLimitExceeded = errors.New("errors limit exceeded")

type Task func() error

// Run starts tasks in n goroutines and stops its work when receiving m errors from tasks.
func Run(tasks []Task, n, m int) error {
	var wg sync.WaitGroup
	var errCount int
	tasksCh := make(chan Task)    // –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞–¥–∞—á
	errCh := make(chan error, m)  // –ö–∞–Ω–∞–ª –¥–ª—è –æ—à–∏–±–æ–∫
	stopCh := make(chan struct{}) // –ö–∞–Ω–∞–ª –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

	// –ó–∞–ø—É—Å—Ç–∏—Ç—å n –≥–æ—Ä—É—Ç–∏–Ω
	for i := 0; i < n; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()

			//  –ß—Ç–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ —Å–∏–≥–Ω–∞–ª–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
			for {
				select {
				case task, ok := <-tasksCh:
					if !ok {
						// ü§¨ –ö–∞–Ω–∞–ª –∑–∞–¥–∞—á –∑–∞–∫—Ä—ã—Ç
						return
					}
					if err := task(); err != nil {
						// üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ –∫–∞–Ω–∞–ª –æ—à–∏–±–æ–∫
						errCh <- err
					}
				case <-stopCh:
					// üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
					return
				}
			}
		}()
	}

	// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ –≤ –∫–∞–Ω–∞–ª
	go func() {
		for _, task := range tasks {
			select {
			case tasksCh <- task:
			case <-stopCh:
				// üî¥ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–¥–∞—á, –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
				return
			}
		}
		close(tasksCh)
	}()

	// –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	go func() {
		wg.Wait()
		close(errCh)
	}()

	// –û–∂–∏–¥–∞–Ω–∏–µ m –æ—à–∏–±–æ–∫
	for err := range errCh {
		if err != nil {
			errCount++
			if errCount >= m {
				close(stopCh)
				return ErrErrorsLimitExceeded
			}
		}
	}

	return nil
}
