volumes:
  postgres-data:
    driver: local

services:
  calendar:
    build:
      context: .
      dockerfile: build/Dockerfile.calendar
    container_name: calendar
    volumes:
      - ./configs/config_docker.toml:/etc/calendar/config.toml
    ports:
      - "8888:8080" # REST http://localhost:8888
      - "8090:8090" # GRPC http://localhost:8090
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Проверяет список дел в календаре и создает задание на отправку уведомления
  scheduler:
    build:
      context: .
      dockerfile: build/Dockerfile.scheduler
    container_name: scheduler
    volumes:
      - ./configs/config_docker.toml:/etc/calendar/config.toml
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # Как-то отправляет уведомление пользователю
  sender:
    build:
      context: .
      dockerfile: build/Dockerfile.sender
    container_name: sender
    volumes:
      - ./configs/config_docker.toml:/etc/calendar/config.toml
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  postgres:
    image: postgres:17
    container_name: postgres
    environment:
      POSTGRES_USER: calendar
      POSTGRES_PASSWORD: calendar-pwd
      POSTGRES_DB: calendar
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U calendar" ]
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - "5432:5432"
    restart: unless-stopped

  # rabbit mq latest version with web UI
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # AMQP
      - "15672:15672" # UI http://localhost:15672 (guest:guest)
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 20s
      retries: 5
    restart: unless-stopped