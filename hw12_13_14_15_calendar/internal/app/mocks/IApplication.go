// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/ar2r/go-otus/hw12_13_14_15_calendar/internal/app/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/ar2r/go-otus/hw12_13_14_15_calendar/internal/model"
)

// IApplication is an autogenerated mock type for the IApplication type
type IApplication struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: ctx, _a1
func (_m *IApplication) CreateEvent(ctx context.Context, _a1 dto.CreateEventDto) (model.Event, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 model.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateEventDto) (model.Event, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateEventDto) model.Event); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(model.Event)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateEventDto) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEvent provides a mock function with given fields: ctx, _a1
func (_m *IApplication) DeleteEvent(ctx context.Context, _a1 dto.DeleteEventDto) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.DeleteEventDto) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListByDate provides a mock function with given fields: ctx, _a1
func (_m *IApplication) ListByDate(ctx context.Context, _a1 dto.ListByDateDto) ([]model.Event, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListByDate")
	}

	var r0 []model.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ListByDateDto) ([]model.Event, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ListByDateDto) []model.Event); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ListByDateDto) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByMonth provides a mock function with given fields: ctx, _a1
func (_m *IApplication) ListByMonth(ctx context.Context, _a1 dto.ListByDateDto) ([]model.Event, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListByMonth")
	}

	var r0 []model.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ListByDateDto) ([]model.Event, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ListByDateDto) []model.Event); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ListByDateDto) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByWeek provides a mock function with given fields: ctx, _a1
func (_m *IApplication) ListByWeek(ctx context.Context, _a1 dto.ListByDateDto) ([]model.Event, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListByWeek")
	}

	var r0 []model.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ListByDateDto) ([]model.Event, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ListByDateDto) []model.Event); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ListByDateDto) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: ctx, _a1
func (_m *IApplication) UpdateEvent(ctx context.Context, _a1 dto.UpdateEventDto) (model.Event, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvent")
	}

	var r0 model.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateEventDto) (model.Event, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateEventDto) model.Event); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(model.Event)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.UpdateEventDto) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIApplication creates a new instance of IApplication. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *IApplication {
	mock := &IApplication{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
