// Code generated by MockGen. DO NOT EDIT.
// Source: app.go
//
// Generated by this command:
//
//	mockgen -source=app.go -destination=mocks/app_mock.go -package=app
//

// Package app is a generated GoMock package.
package app

import (
	context "context"
	reflect "reflect"

	dto "github.com/ar2r/go-otus/hw12_13_14_15_calendar/internal/app/dto"
	model "github.com/ar2r/go-otus/hw12_13_14_15_calendar/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIApplication is a mock of IApplication interface.
type MockIApplication struct {
	ctrl     *gomock.Controller
	recorder *MockIApplicationMockRecorder
	isgomock struct{}
}

// MockIApplicationMockRecorder is the mock recorder for MockIApplication.
type MockIApplicationMockRecorder struct {
	mock *MockIApplication
}

// NewMockIApplication creates a new mock instance.
func NewMockIApplication(ctrl *gomock.Controller) *MockIApplication {
	mock := &MockIApplication{ctrl: ctrl}
	mock.recorder = &MockIApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIApplication) EXPECT() *MockIApplicationMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockIApplication) CreateEvent(ctx context.Context, dto dto.CreateEventDto) (model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, dto)
	ret0, _ := ret[0].(model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockIApplicationMockRecorder) CreateEvent(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockIApplication)(nil).CreateEvent), ctx, dto)
}

// DeleteEvent mocks base method.
func (m *MockIApplication) DeleteEvent(ctx context.Context, dto dto.DeleteEventDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockIApplicationMockRecorder) DeleteEvent(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockIApplication)(nil).DeleteEvent), ctx, dto)
}

// ListByDate mocks base method.
func (m *MockIApplication) ListByDate(ctx context.Context, dto dto.ListByDateDto) ([]model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByDate", ctx, dto)
	ret0, _ := ret[0].([]model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByDate indicates an expected call of ListByDate.
func (mr *MockIApplicationMockRecorder) ListByDate(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByDate", reflect.TypeOf((*MockIApplication)(nil).ListByDate), ctx, dto)
}

// ListByMonth mocks base method.
func (m *MockIApplication) ListByMonth(ctx context.Context, dto dto.ListByDateDto) ([]model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByMonth", ctx, dto)
	ret0, _ := ret[0].([]model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByMonth indicates an expected call of ListByMonth.
func (mr *MockIApplicationMockRecorder) ListByMonth(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByMonth", reflect.TypeOf((*MockIApplication)(nil).ListByMonth), ctx, dto)
}

// ListByWeek mocks base method.
func (m *MockIApplication) ListByWeek(ctx context.Context, dto dto.ListByDateDto) ([]model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByWeek", ctx, dto)
	ret0, _ := ret[0].([]model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByWeek indicates an expected call of ListByWeek.
func (mr *MockIApplicationMockRecorder) ListByWeek(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByWeek", reflect.TypeOf((*MockIApplication)(nil).ListByWeek), ctx, dto)
}

// UpdateEvent mocks base method.
func (m *MockIApplication) UpdateEvent(ctx context.Context, dto dto.UpdateEventDto) (model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, dto)
	ret0, _ := ret[0].(model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockIApplicationMockRecorder) UpdateEvent(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockIApplication)(nil).UpdateEvent), ctx, dto)
}
