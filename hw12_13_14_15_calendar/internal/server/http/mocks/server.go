// Code generated by MockGen. DO NOT EDIT.
// Source: server.go
//
// Generated by this command:
//
//	mockgen -source=server.go -destination=mocks/server.go
//

// Package mock_httpserver is a generated GoMock package.
package mock_httpserver

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIServerLogger is a mock of IServerLogger interface.
type MockIServerLogger struct {
	ctrl     *gomock.Controller
	recorder *MockIServerLoggerMockRecorder
	isgomock struct{}
}

// MockIServerLoggerMockRecorder is the mock recorder for MockIServerLogger.
type MockIServerLoggerMockRecorder struct {
	mock *MockIServerLogger
}

// NewMockIServerLogger creates a new mock instance.
func NewMockIServerLogger(ctrl *gomock.Controller) *MockIServerLogger {
	mock := &MockIServerLogger{ctrl: ctrl}
	mock.recorder = &MockIServerLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServerLogger) EXPECT() *MockIServerLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockIServerLogger) Error(msg string, attrs ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockIServerLoggerMockRecorder) Error(msg any, attrs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, attrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockIServerLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockIServerLogger) Info(msg string, attrs ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockIServerLoggerMockRecorder) Info(msg any, attrs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, attrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockIServerLogger)(nil).Info), varargs...)
}
