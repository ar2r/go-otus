// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mocks/interface.go
//

// Package mock_server is a generated GoMock package.
package mock_server

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIServer is a mock of IServer interface.
type MockIServer struct {
	ctrl     *gomock.Controller
	recorder *MockIServerMockRecorder
	isgomock struct{}
}

// MockIServerMockRecorder is the mock recorder for MockIServer.
type MockIServerMockRecorder struct {
	mock *MockIServer
}

// NewMockIServer creates a new mock instance.
func NewMockIServer(ctrl *gomock.Controller) *MockIServer {
	mock := &MockIServer{ctrl: ctrl}
	mock.recorder = &MockIServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServer) EXPECT() *MockIServerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockIServer) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockIServerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIServer)(nil).Run))
}

// Stop mocks base method.
func (m *MockIServer) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockIServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIServer)(nil).Stop))
}
